# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  avoidant_redundancy:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous redundant jobs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GH_TOKEN }}

  lint:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Download dependencies
        run: |
          go mod download
          go mod tidy

      - name: Run go fmt
        run: go fmt ./...

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

  build:
    needs: [avoidant_redundancy, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Download dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o app .
    
    - uses: actions/upload-artifact@v4
      with: 
        name: dist
        path: dist

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cargar variables de entorno
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

    - name: Test
      run: go test -v 

    - name: Send Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        STATUS="${{ job.status }}"
        COMMIT_SHA="${{ github.sha }}"
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
        COMMIT_TIME="${{ github.event.head_commit.timestamp }}"
        BRANCH="${{ github.ref_name }}"
        PAYLOAD="{
          \"text\": \"üîî *Push detectado en GitHub*\nüë§ Autor: ${COMMIT_AUTHOR}\nüïí Hora: ${COMMIT_TIME}\nüåø Rama: ${BRANCH}\n‚úâÔ∏è Commit: ${COMMIT_MSG}\nüì¶ SHA: ${COMMIT_SHA}\n‚úÖ Estado del Job: ${STATUS}\"
        }"
        curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"
  
  docker:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/api-isi:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/api-isi:latest
  
  
  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Trigger Render deploy hook
        run: |
          curl -X POST https://api.render.com/deploy/srv-d1463efdiees73atec10?key=F8IPhtF63ZE  # reemplaz√° con tu deploy hook URL

