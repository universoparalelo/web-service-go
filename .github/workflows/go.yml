# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  avoidant_redundancy:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous redundant jobs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GH_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.58.1

    - name: Run golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run ./...

  build:
    needs: [avoidant_redundancy, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Download dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        mkdir -p dist
        go build ./...
    
    - uses: actions/upload-artifact@v4
      with: 
        name: dist
        path: dist

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Cargar variables de entorno
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV

    - name: Test
      run: go test -v 

    - name: Send Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        STATUS="${{ job.status }}"
        COMMIT_SHA="${{ github.sha }}"
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
        COMMIT_TIME="${{ github.event.head_commit.timestamp }}"
        BRANCH="${{ github.ref_name }}"
        PAYLOAD="{
          \"text\": \"🔔 *Push detectado en GitHub*\n👤 Autor: ${COMMIT_AUTHOR}\n🕒 Hora: ${COMMIT_TIME}\n🌿 Rama: ${BRANCH}\n✉️ Commit: ${COMMIT_MSG}\n📦 SHA: ${COMMIT_SHA}\n✅ Estado del Job: ${STATUS}\"
        }"
        curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"

